{
  "address": "0x6B7C5306B60c40f3E47E48E21628c0c695326EBd",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "enteranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionID",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callBackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "playernum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "S_raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle__upkeepnotneeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle_notOpen",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "lastWinner",
          "type": "address"
        }
      ],
      "name": "LastWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRandomWinner",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEnterenceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "lastTime",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "players",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "NUM",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "state",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmation",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "requestConfirmations",
          "type": "uint16"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x87c2b79167763da495672a42a72bf20f3e3bbf53d76051fa24688575150f3c7e",
  "receipt": {
    "to": null,
    "from": "0x8e4BaF58cC5Be13d04a4D8F81577a39EF2B4cB63",
    "contractAddress": "0x6B7C5306B60c40f3E47E48E21628c0c695326EBd",
    "transactionIndex": 23,
    "gasUsed": "1214005",
    "logsBloom": "0x
    "blockHash": "0x08dd85b271ccdf8434ad8f1c924f3ed817b9664afc91339f56b0da506ecda3be",
    "transactionHash": "0x87c2b79167763da495672a42a72bf20f3e3bbf53d76051fa24688575150f3c7e",
    "logs": [],
    "blockNumber": 7523784,
    "cumulativeGasUsed": "13586739",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2Ca8E0C643bDe4C2E08ab1fA0da3401AdAD7734D",
    "100000000000000000",
    "0x79d3d8832d904592c0bf9818b621522c988bb8b0c05cdc3b15aea1b6e8db0c15",
    "984",
    "500000",
    "30"
  ],
  "numDeployments": 3,
  "solcInputHash": "ded2639886954d2fa703aab7659519c5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.9+commit.e5eed63a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"enteranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionID\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callBackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"playernum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"S_raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle__upkeepnotneeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle_notOpen\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"lastWinner\",\"type\":\"address\"}],\"name\":\"LastWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRandomWinner\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEnterenceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"lastTime\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"players\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"NUM\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"state\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmation\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"requestConfirmations\",\"type\":\"uint16\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Vishwanath Gugwad\",\"details\":\"This implements chainlink VRF v2 and chainlink keepers.\",\"kind\":\"dev\",\"methods\":{},\"title\":\"A sample Raffle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Functions \"},\"getEnterenceFee()\":{\"notice\":\"view //   pure functions  \"}},\"notice\":\"This contract is for creating untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/KeeperBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ncontract KeeperBase {\\n  error OnlySimulatedBackend();\\n\\n  /**\\n   * @notice method that allows it to be simulated via eth_call by checking that\\n   * the sender is the zero address.\\n   */\\n  function preventExecution() internal view {\\n    if (tx.origin != address(0)) {\\n      revert OnlySimulatedBackend();\\n    }\\n  }\\n\\n  /**\\n   * @notice modifier that allows it to be simulated via eth_call by checking\\n   * that the sender is the zero address.\\n   */\\n  modifier cannotExecute() {\\n    preventExecution();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x5dc972fdf3a524312e68ef6d2e58bcdaf965d08d9415aefa289207350c2bc85a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./KeeperBase.sol\\\";\\nimport \\\"./interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nabstract contract KeeperCompatible is KeeperBase, KeeperCompatibleInterface {}\\n\",\"keccak256\":\"0xfdb84fea1ee213662ae66b95d4f620be73b7af5ede58be3d330b222b9b566d95\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n// KeeperCompatible.sol imports the functions from both ./KeeperBase.sol and\\n// ./interfaces/KeeperCompatibleInterface.sol\\nimport \\\"@chainlink/contracts/src/v0.8/KeeperCompatible.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle_notOpen();\\nerror Raffle__upkeepnotneeded(uint256 currentBalance, uint256 playernum, uint256 S_raffleState);\\n\\n/**\\n * @title A sample Raffle contract\\n * @author Vishwanath Gugwad\\n * @notice This contract is for creating untamperable decentralized smart contract\\n * @dev This implements chainlink VRF v2 and chainlink keepers.\\n */\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface {\\n    /* Type declarations */\\n    enum RaffleState {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State Varirbles */\\n    // Chainlink VRF Variables\\n\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionID;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callBackGasLimit;\\n    uint32 private constant NUMWORDS = 1;\\n\\n    /* State Varirbles */\\n    address s_recentWinner;\\n    uint256 private immutable i_interval;\\n    uint256 private s_lastTimeStamp;\\n    RaffleState private S_raffleState;\\n    uint256 private immutable i_enteranceFee;\\n    address payable[] private s_players;\\n\\n    /* Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRandomWinner(uint256 indexed requestId);\\n    event LastWinner(address indexed lastWinner);\\n\\n    /** Functions */\\n    constructor(\\n        address vrfCoordinatorV2,\\n        uint256 enteranceFee,\\n        bytes32 gasLane,\\n        uint64 subscriptionID,\\n        uint32 callBackGasLimit,\\n        uint256 interval\\n    ) VRFConsumerBaseV2(vrfCoordinatorV2) {\\n        S_raffleState = RaffleState.OPEN;\\n        i_gasLane = gasLane;\\n        i_subscriptionID = subscriptionID;\\n        i_enteranceFee = enteranceFee;\\n        i_callBackGasLimit = callBackGasLimit;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        s_lastTimeStamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable {\\n        if (msg.value < i_enteranceFee) {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (S_raffleState != RaffleState.OPEN) {\\n            revert Raffle_notOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    function performUpkeep(\\n        bytes calldata /* performData */\\n    ) external override {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"\\\");\\n        if (!upkeepNeeded) {\\n            revert Raffle__upkeepnotneeded(\\n                address(this).balance,\\n                s_players.length,\\n                uint256(S_raffleState)\\n            );\\n        }\\n        S_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane, // gaslane\\n            i_subscriptionID,\\n            REQUEST_CONFIRMATIONS,\\n            i_callBackGasLimit,\\n            NUMWORDS\\n        );\\n        emit RequestedRandomWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(\\n        uint256, /*requistId*/\\n        uint256[] memory randomWords\\n    ) internal override {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        S_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimeStamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit LastWinner(recentWinner);\\n    }\\n\\n    function checkUpkeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        virtual\\n        override\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = (S_raffleState == RaffleState.OPEN);\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        bool hasPlayers = (s_players.length > 0);\\n        bool hasBalance = address(this).balance > 0;\\n        upkeepNeeded = (isOpen && timePassed && hasPlayers && hasBalance);\\n    }\\n\\n    /** view //   pure functions  */\\n    function getEnterenceFee() public view returns (uint256) {\\n        return i_enteranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns (address) {\\n        return s_players[index];\\n    }\\n\\n    function getRaffleState() public view returns (RaffleState state) {\\n        state = S_raffleState;\\n    }\\n\\n    function getNumberOfWords() public pure returns (uint256 NUM) {\\n        NUM = NUMWORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns (uint256 players) {\\n        players = s_players.length;\\n    }\\n\\n    function getLastTimeStamp() public view returns (uint256 lastTime) {\\n        lastTime = s_lastTimeStamp;\\n    }\\n\\n    function getRequestConfirmation() public pure returns (uint16 requestConfirmations) {\\n        requestConfirmations = REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns (uint256 interval) {\\n        interval = i_interval;\\n    }\\n\\n    function getRecentWinner() public view returns (address) {\\n        return s_recentWinner;\\n    }\\n}\\n\",\"keccak256\":\"0x157cbb064e595d6719f63b73f93bd9b2068d18b33fdc58c7940bd423637b2384\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200183338038062001833833981810160405281019062000038919062000294565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506000600260006101000a81548160ff0219169083600181111562000097576200009662000330565b5b02179055508360c081815250508267ffffffffffffffff1660e08167ffffffffffffffff16815250508461014081815250508163ffffffff166101008163ffffffff16815250508573ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1681525050426001819055508061012081815250505050505050506200035f565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620001608262000133565b9050919050565b620001728162000153565b81146200017e57600080fd5b50565b600081519050620001928162000167565b92915050565b6000819050919050565b620001ad8162000198565b8114620001b957600080fd5b50565b600081519050620001cd81620001a2565b92915050565b6000819050919050565b620001e881620001d3565b8114620001f457600080fd5b50565b6000815190506200020881620001dd565b92915050565b600067ffffffffffffffff82169050919050565b6200022d816200020e565b81146200023957600080fd5b50565b6000815190506200024d8162000222565b92915050565b600063ffffffff82169050919050565b6200026e8162000253565b81146200027a57600080fd5b50565b6000815190506200028e8162000263565b92915050565b60008060008060008060c08789031215620002b457620002b36200012e565b5b6000620002c489828a0162000181565b9650506020620002d789828a01620001bc565b9550506040620002ea89828a01620001f7565b9450506060620002fd89828a016200023c565b93505060806200031089828a016200027d565b92505060a06200032389828a01620001bc565b9150509295509295509295565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60805160a05160c05160e051610100516101205161014051611464620003cf600039600081816103cf015261084c0152600081816107a70152610824015260006106740152600061065101526000610630015260006105f401526000818161030f015261036301526114646000f3fe6080604052600436106100c25760003560e01c80636f9d9c841161007f578063c1c244e811610059578063c1c244e814610238578063ca6a9ef814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636f9d9c84146101b757806391ad27b4146101e2578063b675400d1461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b5780634585e33b14610125578063473f1ddc1461014e5780636e04ff0d14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c28565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610de6565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061014c60048036038101906101479190610e9d565b61053c565b005b34801561015a57600080fd5b5061016361073c565b6040516101709190610f2b565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190610ffb565b610765565b6040516101ae9291906110e7565b60405180910390f35b3480156101c357600080fd5b506101cc610811565b6040516101d99190611126565b60405180910390f35b3480156101ee57600080fd5b506101f7610820565b6040516102049190611126565b60405180910390f35b34801561021957600080fd5b50610222610848565b60405161022f9190611126565b60405180910390f35b34801561024457600080fd5b5061024d610870565b60405161025a9190611126565b60405180910390f35b34801561026f57600080fd5b5061027861087a565b604051610285919061115e565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611179565b610883565b6040516102c29190610f2b565b60405180910390f35b3480156102d757600080fd5b506102e06108cb565b6040516102ed9190611126565b60405180910390f35b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b69291906111a6565b60405180910390fd5b6103c982826108d8565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610bb1565b5b600260009054906101000a900460ff16600181111561045d5761045c610bb1565b5b14610494576040517fe09c865100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061055660405180602001604052806000815250610765565b509050806105c55747600380549050600260009054906101000a900460ff16600181111561058757610586610bb1565b5b6040517f0abba1e50000000000000000000000000000000000000000000000000000000081526004016105bc939291906111cf565b60405180910390fd5b6001600260006101000a81548160ff021916908360018111156105eb576105ea610bb1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106b5959493929190611261565b602060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070791906112c9565b9050807f1fe6c803a34f3487c47f1c0c9d1723f1d731ab15ae39e407f7aaa1396d4b0bea60405160405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600080600181111561077e5761077d610bb1565b5b600260009054906101000a900460ff1660018111156107a05761079f610bb1565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426107d49190611325565b119050600080600380549050119050600080471190508380156107f45750825b80156107fd5750815b80156108065750805b955050505050915091565b6000600163ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b60006003905090565b60006003828154811061089957610898611359565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b6000600380549050826000815181106108f4576108f3611359565b5b602002602001015161090691906113b7565b905060006003828154811061091e5761091d611359565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260006101000a81548160ff021916908360018111156109b1576109b0610bb1565b5b0217905550600067ffffffffffffffff8111156109d1576109d0610ca3565b5b6040519080825280602002602001820160405280156109ff5781602001602082028036833780820191505090505b5060039080519060200190610a15929190610b0a565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4390611419565b60006040518083038185875af1925050503d8060008114610a80576040519150601f19603f3d011682016040523d82523d6000602084013e610a85565b606091505b5050905080610ac0576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fc6d7955ce231faa420f79a2b5f7be7618277a17ad83937aee7947929c5b921fe60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b83579160200282015b82811115610b825782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2a565b5b509050610b909190610b94565b5090565b5b80821115610bad576000816000905550600101610b95565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf157610bf0610bb1565b5b50565b6000819050610c0282610be0565b919050565b6000610c1282610bf4565b9050919050565b610c2281610c07565b82525050565b6000602082019050610c3d6000830184610c19565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6a81610c57565b8114610c7557600080fd5b50565b600081359050610c8781610c61565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cdb82610c92565b810181811067ffffffffffffffff82111715610cfa57610cf9610ca3565b5b80604052505050565b6000610d0d610c43565b9050610d198282610cd2565b919050565b600067ffffffffffffffff821115610d3957610d38610ca3565b5b602082029050602081019050919050565b600080fd5b6000610d62610d5d84610d1e565b610d03565b90508083825260208201905060208402830185811115610d8557610d84610d4a565b5b835b81811015610dae5780610d9a8882610c78565b845260208401935050602081019050610d87565b5050509392505050565b600082601f830112610dcd57610dcc610c8d565b5b8135610ddd848260208601610d4f565b91505092915050565b60008060408385031215610dfd57610dfc610c4d565b5b6000610e0b85828601610c78565b925050602083013567ffffffffffffffff811115610e2c57610e2b610c52565b5b610e3885828601610db8565b9150509250929050565b600080fd5b60008083601f840112610e5d57610e5c610c8d565b5b8235905067ffffffffffffffff811115610e7a57610e79610e42565b5b602083019150836001820283011115610e9657610e95610d4a565b5b9250929050565b60008060208385031215610eb457610eb3610c4d565b5b600083013567ffffffffffffffff811115610ed257610ed1610c52565b5b610ede85828601610e47565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1582610eea565b9050919050565b610f2581610f0a565b82525050565b6000602082019050610f406000830184610f1c565b92915050565b600080fd5b600067ffffffffffffffff821115610f6657610f65610ca3565b5b610f6f82610c92565b9050602081019050919050565b82818337600083830152505050565b6000610f9e610f9984610f4b565b610d03565b905082815260208101848484011115610fba57610fb9610f46565b5b610fc5848285610f7c565b509392505050565b600082601f830112610fe257610fe1610c8d565b5b8135610ff2848260208601610f8b565b91505092915050565b60006020828403121561101157611010610c4d565b5b600082013567ffffffffffffffff81111561102f5761102e610c52565b5b61103b84828501610fcd565b91505092915050565b60008115159050919050565b61105981611044565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561109957808201518184015260208101905061107e565b838111156110a8576000848401525b50505050565b60006110b98261105f565b6110c3818561106a565b93506110d381856020860161107b565b6110dc81610c92565b840191505092915050565b60006040820190506110fc6000830185611050565b818103602083015261110e81846110ae565b90509392505050565b61112081610c57565b82525050565b600060208201905061113b6000830184611117565b92915050565b600061ffff82169050919050565b61115881611141565b82525050565b6000602082019050611173600083018461114f565b92915050565b60006020828403121561118f5761118e610c4d565b5b600061119d84828501610c78565b91505092915050565b60006040820190506111bb6000830185610f1c565b6111c86020830184610f1c565b9392505050565b60006060820190506111e46000830186611117565b6111f16020830185611117565b6111fe6040830184611117565b949350505050565b6000819050919050565b61121981611206565b82525050565b600067ffffffffffffffff82169050919050565b61123c8161121f565b82525050565b600063ffffffff82169050919050565b61125b81611242565b82525050565b600060a0820190506112766000830188611210565b6112836020830187611233565b611290604083018661114f565b61129d6060830185611252565b6112aa6080830184611252565b9695505050505050565b6000815190506112c381610c61565b92915050565b6000602082840312156112df576112de610c4d565b5b60006112ed848285016112b4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133082610c57565b915061133b83610c57565b92508282101561134e5761134d6112f6565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113c282610c57565b91506113cd83610c57565b9250826113dd576113dc611388565b5b828206905092915050565b600081905092915050565b50565b60006114036000836113e8565b915061140e826113f3565b600082019050919050565b6000611424826113f6565b915081905091905056fea2646970667358221220e2974e29a123a83f5931625ae8cac92107024eec5b41f075f244cb64f1a15a0264736f6c63430008090033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c80636f9d9c841161007f578063c1c244e811610059578063c1c244e814610238578063ca6a9ef814610263578063e55ae4e81461028e578063fd6673f5146102cb576100c2565b80636f9d9c84146101b757806391ad27b4146101e2578063b675400d1461020d576100c2565b8063115cbaf5146100c75780631fe543e3146100f25780632cfcc5391461011b5780634585e33b14610125578063473f1ddc1461014e5780636e04ff0d14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e99190610c28565b60405180910390f35b3480156100fe57600080fd5b5061011960048036038101906101149190610de6565b61030d565b005b6101236103cd565b005b34801561013157600080fd5b5061014c60048036038101906101479190610e9d565b61053c565b005b34801561015a57600080fd5b5061016361073c565b6040516101709190610f2b565b60405180910390f35b34801561018557600080fd5b506101a0600480360381019061019b9190610ffb565b610765565b6040516101ae9291906110e7565b60405180910390f35b3480156101c357600080fd5b506101cc610811565b6040516101d99190611126565b60405180910390f35b3480156101ee57600080fd5b506101f7610820565b6040516102049190611126565b60405180910390f35b34801561021957600080fd5b50610222610848565b60405161022f9190611126565b60405180910390f35b34801561024457600080fd5b5061024d610870565b60405161025a9190611126565b60405180910390f35b34801561026f57600080fd5b5061027861087a565b604051610285919061115e565b60405180910390f35b34801561029a57600080fd5b506102b560048036038101906102b09190611179565b610883565b6040516102c29190610f2b565b60405180910390f35b3480156102d757600080fd5b506102e06108cb565b6040516102ed9190611126565b60405180910390f35b6000600260009054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103bf57337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103b69291906111a6565b60405180910390fd5b6103c982826108d8565b5050565b7f0000000000000000000000000000000000000000000000000000000000000000341015610427576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561043b5761043a610bb1565b5b600260009054906101000a900460ff16600181111561045d5761045c610bb1565b5b14610494576040517fe09c865100000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b600061055660405180602001604052806000815250610765565b509050806105c55747600380549050600260009054906101000a900460ff16600181111561058757610586610bb1565b5b6040517f0abba1e50000000000000000000000000000000000000000000000000000000081526004016105bc939291906111cf565b60405180910390fd5b6001600260006101000a81548160ff021916908360018111156105eb576105ea610bb1565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b81526004016106b5959493929190611261565b602060405180830381600087803b1580156106cf57600080fd5b505af11580156106e3573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070791906112c9565b9050807f1fe6c803a34f3487c47f1c0c9d1723f1d731ab15ae39e407f7aaa1396d4b0bea60405160405180910390a250505050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b60006060600080600181111561077e5761077d610bb1565b5b600260009054906101000a900460ff1660018111156107a05761079f610bb1565b5b14905060007f0000000000000000000000000000000000000000000000000000000000000000600154426107d49190611325565b119050600080600380549050119050600080471190508380156107f45750825b80156107fd5750815b80156108065750805b955050505050915091565b6000600163ffffffff16905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600154905090565b60006003905090565b60006003828154811061089957610898611359565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600380549050905090565b6000600380549050826000815181106108f4576108f3611359565b5b602002602001015161090691906113b7565b905060006003828154811061091e5761091d611359565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600260006101000a81548160ff021916908360018111156109b1576109b0610bb1565b5b0217905550600067ffffffffffffffff8111156109d1576109d0610ca3565b5b6040519080825280602002602001820160405280156109ff5781602001602082028036833780820191505090505b5060039080519060200190610a15929190610b0a565b504260018190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a4390611419565b60006040518083038185875af1925050503d8060008114610a80576040519150601f19603f3d011682016040523d82523d6000602084013e610a85565b606091505b5050905080610ac0576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167fc6d7955ce231faa420f79a2b5f7be7618277a17ad83937aee7947929c5b921fe60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b83579160200282015b82811115610b825782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b2a565b5b509050610b909190610b94565b5090565b5b80821115610bad576000816000905550600101610b95565b5090565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60028110610bf157610bf0610bb1565b5b50565b6000819050610c0282610be0565b919050565b6000610c1282610bf4565b9050919050565b610c2281610c07565b82525050565b6000602082019050610c3d6000830184610c19565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b610c6a81610c57565b8114610c7557600080fd5b50565b600081359050610c8781610c61565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b610cdb82610c92565b810181811067ffffffffffffffff82111715610cfa57610cf9610ca3565b5b80604052505050565b6000610d0d610c43565b9050610d198282610cd2565b919050565b600067ffffffffffffffff821115610d3957610d38610ca3565b5b602082029050602081019050919050565b600080fd5b6000610d62610d5d84610d1e565b610d03565b90508083825260208201905060208402830185811115610d8557610d84610d4a565b5b835b81811015610dae5780610d9a8882610c78565b845260208401935050602081019050610d87565b5050509392505050565b600082601f830112610dcd57610dcc610c8d565b5b8135610ddd848260208601610d4f565b91505092915050565b60008060408385031215610dfd57610dfc610c4d565b5b6000610e0b85828601610c78565b925050602083013567ffffffffffffffff811115610e2c57610e2b610c52565b5b610e3885828601610db8565b9150509250929050565b600080fd5b60008083601f840112610e5d57610e5c610c8d565b5b8235905067ffffffffffffffff811115610e7a57610e79610e42565b5b602083019150836001820283011115610e9657610e95610d4a565b5b9250929050565b60008060208385031215610eb457610eb3610c4d565b5b600083013567ffffffffffffffff811115610ed257610ed1610c52565b5b610ede85828601610e47565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610f1582610eea565b9050919050565b610f2581610f0a565b82525050565b6000602082019050610f406000830184610f1c565b92915050565b600080fd5b600067ffffffffffffffff821115610f6657610f65610ca3565b5b610f6f82610c92565b9050602081019050919050565b82818337600083830152505050565b6000610f9e610f9984610f4b565b610d03565b905082815260208101848484011115610fba57610fb9610f46565b5b610fc5848285610f7c565b509392505050565b600082601f830112610fe257610fe1610c8d565b5b8135610ff2848260208601610f8b565b91505092915050565b60006020828403121561101157611010610c4d565b5b600082013567ffffffffffffffff81111561102f5761102e610c52565b5b61103b84828501610fcd565b91505092915050565b60008115159050919050565b61105981611044565b82525050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561109957808201518184015260208101905061107e565b838111156110a8576000848401525b50505050565b60006110b98261105f565b6110c3818561106a565b93506110d381856020860161107b565b6110dc81610c92565b840191505092915050565b60006040820190506110fc6000830185611050565b818103602083015261110e81846110ae565b90509392505050565b61112081610c57565b82525050565b600060208201905061113b6000830184611117565b92915050565b600061ffff82169050919050565b61115881611141565b82525050565b6000602082019050611173600083018461114f565b92915050565b60006020828403121561118f5761118e610c4d565b5b600061119d84828501610c78565b91505092915050565b60006040820190506111bb6000830185610f1c565b6111c86020830184610f1c565b9392505050565b60006060820190506111e46000830186611117565b6111f16020830185611117565b6111fe6040830184611117565b949350505050565b6000819050919050565b61121981611206565b82525050565b600067ffffffffffffffff82169050919050565b61123c8161121f565b82525050565b600063ffffffff82169050919050565b61125b81611242565b82525050565b600060a0820190506112766000830188611210565b6112836020830187611233565b611290604083018661114f565b61129d6060830185611252565b6112aa6080830184611252565b9695505050505050565b6000815190506112c381610c61565b92915050565b6000602082840312156112df576112de610c4d565b5b60006112ed848285016112b4565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061133082610c57565b915061133b83610c57565b92508282101561134e5761134d6112f6565b5b828203905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006113c282610c57565b91506113cd83610c57565b9250826113dd576113dc611388565b5b828206905092915050565b600081905092915050565b50565b60006114036000836113e8565b915061140e826113f3565b600082019050919050565b6000611424826113f6565b915081905091905056fea2646970667358221220e2974e29a123a83f5931625ae8cac92107024eec5b41f075f244cb64f1a15a0264736f6c63430008090033",
  "devdoc": {
    "author": "Vishwanath Gugwad",
    "details": "This implements chainlink VRF v2 and chainlink keepers.",
    "kind": "dev",
    "methods": {},
    "title": "A sample Raffle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Functions "
      },
      "getEnterenceFee()": {
        "notice": "view //   pure functions  "
      }
    },
    "notice": "This contract is for creating untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 248,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 252,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 255,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "S_raffleState",
        "offset": 0,
        "slot": "2",
        "type": "t_enum(RaffleState)231"
      },
      {
        "astId": 260,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address_payable)dyn_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)231": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}